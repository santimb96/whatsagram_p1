/**@font-face { font-family: "Roboto Light"; src: url("../fonts/Roboto-Light.ttf") }**/
/**
TODO 15: COMENTAR CODIGO CSS ✔
 */
/**
establecemos el CSS común para toda la app
 */

/**
el body tendra estas caracteristicas:
 */
*{
    font-family: 'Roboto', sans-serif;
}
body {
    background: black;
    margin: 0;
}

/**
la interfaz de la app tendra un fondo de imagen y un ancho y un largo fijo (Samsung S5)
ademas de esto, declaramos que cada fila tendra un porcentaje del largo gracias a grid
 */

.interfaz {
    background-image: url("../img/whatsappBackground.jpg");
    height: 640px;
    width: 360px;
    display: grid;
    grid-template-rows: 10% 50% 10% 30%;
}

/**
la vista de los mensajes etsa hecha mediante flex para poderlos visualizar de abajo
hacia arriba mediante las propiedades flex
 */

.vistaMensajes {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    overflow-y: scroll;
    scroll-behavior: auto;
}

/**
la cabecera tendra una imagen y un texto puramente estetico mediante grid
e indicando que la cabecera solo ocupa una fila
 */

.cabecera {
    display: grid;
    color: white;
    font-weight: bold;
    background-color: #131313;
    border: black 1px solid;
    grid-template-columns: 20% 80%;
    grid-template-rows: 100%;
}

/**
la imagen de la cabecera tendra sus propias propiedades,
imitando las de WhatsApp
 */
.cabecera > img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: white 1px solid;
    margin: 10px;
    place-items: start;
}

.cabecera > div {
    align-self: center;
}

/**
al nombre de usuario le asociamos un tamaño X
 */
#usuario {
    font-size: 1rem;
    margin-bottom: 0;
}

/**
al estado, otro mas pequeño que el anterior para que predomine el usuario
 */
#estado {
    font-size: 0.8rem;
    margin-top: 0;
}

/**
el textarea (inputBox), esta hecho mediante flex y el uso de wrap
para redimensionar acorde al ancho de la app
 */
.inputBox {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: flex-start;
    align-items: flex-end;
    margin-top: 25px;
    padding: 3px;
}

/**
a los botones del inputBox les asignamos tamaño X
 */
.inputBox > button {
    width: 20%;
    height: 100%;
}

/**
asignamos propiedades especificas al textarea meramente esteticas
 */
.inputBox > textarea {
    font-family: "Roboto Light", sans-serif;
    grid-column-start: 2;
    border-radius: 10px;
    background-color: #535353;
    color: white;
    font-size: 18px;
    resize: none;
    height: 28px;
    outline: none;
}

/**
el contenedor de botones esta hecho mediante flex
 */
.botones {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: flex-start;
    align-items: flex-end;
    background-color: #131313;
    padding: 3px;
}

/**
el boton de enviar tiene un estilo especial y por ello tiene su propio ID
 */
#enviar {
    width: 35px;
    height: 35px;
    background-color: #131313;
    border-radius: 50%;
    margin-left: 15px;
    border: none;
}

/**
en este apartado, establecemos propiedades especificas a cada boton no caracter
 */
.button:nth-child(21) {
    width: 15%;
}

.button:nth-child(29) {
    width: 15%;
}

.button:nth-child(32) {
    width: 15%;
}

.button:nth-child(34) {
    width: 30%;
}

.button:nth-child(36) {
    width: 15%;
}

/**
establecemos la propiedad :hover para que cuando pasemos por encima mediante
raton, cambie el fondo del boton a uno mas claro paar que el usuario sepa
que esta pasando por encima de este
 */
.button:hover {
    background-color: dimgrey;
}

.button:active {
    background: #E1D9D1;
    color: #131313;
}

#enviar:hover {
    background-color: grey;
}

/**
estilo para cada boton de manera generica
 */
.button {
    font-family: "Roboto Light", sans-serif;
    border-radius: 10px;
    width: 10%;
    height: 25%;
    color: white;
    background-color: #5b5b5b;
    border: black 1px solid;
}

/**
estilos para cada mensaje
 */
.mensaje {
    color: white;
    background: #131313;
    padding: 2px 5px;
    min-width: 20%;
    max-width: 90%;
    /**
    Word-wrap sirve para cuando se supera el ancho del div, en este caso, haga un salto de linea
     */
    Word-wrap: break-Word;
    border-radius: 7px;
    margin: 3px;
}

/**
dentro de la vista de los mensajes, cogemos la fecha actual (div que se genera mediante JS),
y le damos un estilo propio ya que no es un mensaje
 */
.vistaMensajes > .fechaActual {
    align-self: center;
    background: darkgray;
    border-radius: 5px;
    font-size: 12px;
    padding: 2px;
}

/**
estilo semejante a la hora que podemos ver en WhatsApp
 */

.hora {
    font-size: 10px;
    color: darkgrey;
    margin-top: 2px;
    margin-right: 6px;
    text-align-last: end;
}

/**
estilos propios para el teclado de emojis
 */
.emojis {
    display: none;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: flex-start;
    align-items: flex-end;
    background-color: #131313;
    padding: 3px;
}

.emojis > .button {
    width: 10%;
    height: 25%;
}

.emojis > .button:nth-child(31) {
    width: 100%;
}

/**
media query adaptativo a cualquier tipo de dispositivo movil mediante
la propiedad vh y vw
 */
@media only screen and (max-width: 400px) {
    .interfaz {
        background-image: url("../img/whatsappBackground.jpg");
        height: 100vh;
        width: 100vw;
        display: grid;
        grid-template-rows: 10% 50% 10% 30%;
    }

}

/**
propiedades especificas para el tamaño desktop de la app
 */
@media only screen and (min-width: 600px) {
    body {
        background-color: black;
        display: grid;
        grid-template-columns: 100%;
        justify-items: center;
    }
}



